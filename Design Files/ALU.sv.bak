module ALU (
	input logic [31:0] A,     // Operand A
	input logic [31:0] B,     // Operand B
	input logic [3:0] ALUop,  // ALU operation code
	output logic [31:0] ALUout, // ALU output
	output reg ZeroFlag // Zero flag
	//output logic BLT //Branch less than
	//output logic BGT //Branch greater than
);

	always @* begin
		ALUout = 'd0;
		ZeroFlag = 'b0;
		case (ALUop)
		
		4'b0000: ALUout = A + B; // Add
		4'b0001: ALUout = A - B; // Subtraction
		
		4'b0010: ALUout = A << B; // Shift left
		4'b0011: ALUout = A >> B; // Shift right
		4'b0100: ALUout = $signed(A) >>> B; // Shift right arithmetic


		4'b0101: ALUout = A & B; // Bitwise AND
		4'b0110: ALUout = A | B; // Bitwise OR
		4'b0111: ALUout = A ^ B; // Bitwise XOR

		4'b1000: ALUout = ($signed(A) < $signed(B)); // Is less than (Signed)
		4'b1001: ALUout = (A < B); // Is less than (Unsigned)
		4'b1010: ALUout = (A == B); // If equal

		4'b1011: ALUout = (A != B); // If not equal
		4'b1100: ALUout = ($signed(A) >= $signed(B)); // If greater than or equal (Signed)
		4'b1101: ALUout = (A >= B); // If greater than or equal (Unsigned)		

		default: ALUout = 32'h0;
		endcase

		 // Set the Zero flag if the result is zero
		 ZeroFlag = (ALUout == 32'h0) ? 1 : 0;
		end

endmodule
