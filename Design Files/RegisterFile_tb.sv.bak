`timescale 1ns / 1ps

module RegisterFile_tb;

  // Inputs
  reg clk = 0;
  reg rst = 0;
  reg reg_wr_en = 0;
  reg [4:0] wr_reg;
  reg [4:0] rd_reg1;
  reg [5:0] rd_reg2;
  reg [31:0] wr_data;

  // Outputs
  wire [31:0] rd_data1;
  wire [31:0] rd_data2;

  // Instantiate the RegisterFile module
  RegisterFile dut (
    .clk(clk),
    .rst(rst),
    .reg_wr_en(reg_wr_en),
    .wr_reg(wr_reg),
    .rd_reg1(rd_reg1),
    .rd_reg2(rd_reg2),
    .wr_data(wr_data),
    .rd_data1(rd_data1),
    .rd_data2(rd_data2)
  );

  // Clock generation
  always #5 clk = ~clk;

  // Testbench stimulus
  initial begin
    // Apply reset and other inputs
    rst = 1;
    reg_wr_en = 0;
    wr_reg = 0;
    rd_reg1 = 0;
    rd_reg2 = 0;
    wr_data = 0;

    // De-assert reset
    #10 rst = 0;

    // Write data to register 5
    #10 reg_wr_en = 1;
    wr_reg = 5;
    wr_data = 42;

    // Read data from register 5 and 10
    #10 reg_wr_en = 0;
    rd_reg1 = 5;
    rd_reg2 = 10;

    // Finish simulation
    #10 $finish;
  end

endmodule
